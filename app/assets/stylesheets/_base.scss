$experimental-support-for-svg: true;

$legacy-support-for-ie: false;
$legacy-support-for-ie8: true;

@import "compass/css3/images";
@import "compass/css3/box-shadow";
@import "compass/css3/border-radius";
@import "compass/css3/text-shadow";
@import "compass/css3/background-size";
@import "compass/css3/columns";
@import "compass/css3/transform";
@import "compass/css3/opacity";
@import "compass/utilities/general/hacks";
@import "compass/typography/links/link-colors";
@import "compass/css3/background-clip";
@import "compass/css3/transition";
@import "compass/css3/box-sizing";
@import "compass/css3/user-interface";

@import "bootstrap/variables";
@import "bootstrap/mixins";

$large-screen:  979px;
$medium-screen: 767px;
$small-screen:  479px;

$black: #1a1a1a;
$lightblue: #21b0e6;
$darkgrey: #787a83;
$grey: #b2b3bc;
$lightgrey: #e4e5f1;
$violet: #9428b6;

@mixin respond-to($media) {
  @if $media == large-screen {
    @media (max-width: $large-screen) { @content; }
  }
  @else if $media == medium-screen {
    @media (max-width: $medium-screen) { @content; }
  }
  @else if $media == small-screen {
    @media (max-width: $small-screen) { @content; }
  }
}

@mixin background-image-retina($file, $width, $height, $type: "png") {
  background-image: image-url($file + '.' + $type);

  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    background-image: image-url($file + '@2x' + '.' + $type);
    background-size: $width $height;
  }
}

@mixin background-image-svg($file, $base64: false) {
  background-image: image-url($file + ".png");
  @if $base64 { background: rgba(0,0,0,0) inline-image(image-path($file + ".svg")); }
  @else { background: rgba(0,0,0,0) image-url($file + ".svg"); }
  background-size: 100% 100%;
}

@mixin vignette($offset, $size, $vAlign, $hAlign, $color: #000){
  $width: 50%;
  @if $hAlign == left { $width: 100% }

  position: relative;
  overflow: hidden;
  text-align: $hAlign;

  &:before,
  &:after {
    content: "";
    position: relative;
    display: inline-block;
    width: $width;
    height: $size;
    background: $color;
    vertical-align: $vAlign;
    @if  $vAlign == bottom {
      top: -0.4em;
    }
  }

  &:before {
    left: -$offset;
    margin-left: -$width;
    @if  $hAlign == left {
      display: none;
    }
  }

  &:after {
    left: $offset;
    margin-right: -$width;
  }

  > * {
    vertical-align: $vAlign;
  }
}

@mixin clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}

@mixin opposite {
  display: inline-block;
  margin-right: -100%;
  width: 100%;
  text-align: right;
}

@mixin flex-box {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex($val) {
  -webkit-box-flex: $val;
  -moz-box-flex: $val;
  -webkit-flex: $val;
  -ms-flex: $val;
  flex: $val;
}

@mixin align-items($val) {
  $newVal: $val;
  @if $val == start { $newVal: flex- + $val }
  @else if $val == end { $newVal: flex- + $val }

  -webkit-box-align: $val;
  -moz-box-align: $val;
  -webkit-align-items: $newVal;
  -moz-align-items: $newVal;
  -o-align-items: $newVal;
  -ms-align-items: $newVal;
  align-items: $newVal;
}

@mixin flex-order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}

/* TODO these mixins are from new compass beta. should be deleted in future */

@mixin input-placeholder {
  @if $experimental-support-for-webkit {
    &::-webkit-input-placeholder {
      @content;
    }
  }
  @if $experimental-support-for-mozilla {
    &:-moz-placeholder {
      @content;
    }
  }
  @if $experimental-support-for-microsoft {
    &:-ms-input-placeholder {
      @content;
    }
  }
}

@mixin border-radius($radius: $default-border-radius, $vertical-radius: false) {
  @if $vertical-radius {
  // Webkit doesn't understand the official shorthand syntax for specifying
  // a vertical radius unless so in case there's several we only take the first.
    @include experimental(border-radius, first-value-of($radius) first-value-of($vertical-radius), not -moz, -webkit, not -o, not -ms, not -khtml, not official);
    @include experimental("border-radius", $radius unquote("/") $vertical-radius, -moz, not -webkit, not -o, not -ms, -khtml, official);
  }
  @else {
    @include experimental(border-radius, $radius);
  }
}